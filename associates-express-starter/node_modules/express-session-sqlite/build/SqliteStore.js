"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SqliteStoreBase_1 = require("./SqliteStoreBase");
const util_1 = require("util");
function sqliteStoreFactory(session) {
    const Store = session.Store;
    // Cannot do extends Store from express-session
    // doing so would mean would have to include express-session as a
    // dependency for this package
    class SqliteStore {
        constructor(config) {
            this.get = (sid, callback) => {
                this.sqliteStore
                    .get(sid)
                    .then(data => {
                    callback(null, data);
                })
                    .catch(callback);
            };
            this.set = (sid, session, callback) => {
                this.sqliteStore
                    .set(sid, session)
                    .then(callback)
                    .catch(callback);
            };
            this.destroy = (sid, callback) => {
                this.sqliteStore
                    .destroy(sid)
                    .then(callback)
                    .catch(callback);
            };
            // @ts-ignore
            this.all = (callback) => {
                this.sqliteStore
                    .all()
                    .then(data => {
                    callback(null, data);
                })
                    .catch(callback);
            };
            this.length = (callback) => {
                this.sqliteStore
                    .length()
                    .then(length => {
                    callback(null, length);
                })
                    .catch(callback);
            };
            this.clear = (callback) => {
                this.sqliteStore
                    .clear()
                    .then(callback)
                    .catch(callback);
            };
            this.touch = (sid, session, callback) => {
                this.sqliteStore
                    .touch(sid, session)
                    .then(callback)
                    .catch(callback);
            };
            Store.call(this, config);
            this.sqliteStore = new SqliteStoreBase_1.SqliteStoreBase(config);
            this.cleanupTimer = setInterval(async () => {
                try {
                    await this.sqliteStore.removeExpiredSessions();
                }
                catch (e) {
                    // ignore
                }
                // 5 mins
            }, config.cleanupInterval || 300000);
        }
    }
    util_1.inherits(SqliteStore, Store);
    // @ts-ignore
    return SqliteStore;
}
exports.default = sqliteStoreFactory;
//# sourceMappingURL=SqliteStore.js.map